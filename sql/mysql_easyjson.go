// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sql

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5a98ae00DecodeGithubComAthouneLepsiusLumberSql(in *jlexer.Lexer, out *Packetbeat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a98ae00EncodeGithubComAthouneLepsiusLumberSql(out *jwriter.Writer, in Packetbeat) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Packetbeat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a98ae00EncodeGithubComAthouneLepsiusLumberSql(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Packetbeat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a98ae00EncodeGithubComAthouneLepsiusLumberSql(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Packetbeat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a98ae00DecodeGithubComAthouneLepsiusLumberSql(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Packetbeat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a98ae00DecodeGithubComAthouneLepsiusLumberSql(l, v)
}
func easyjson5a98ae00DecodeGithubComAthouneLepsiusLumberSql1(in *jlexer.Lexer, out *Mysql) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "client_ip":
			out.ClientIP = string(in.String())
		case "client_server":
			out.ClientServer = string(in.String())
		case "client_proc":
			out.ClientProc = string(in.String())
		case "@timestamp":
			out.TimeStamp = string(in.String())
		case "query":
			out.Query = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "bytes_out":
			out.BytesOut = int(in.Int())
		case "bytes_in":
			out.BytesIn = int(in.Int())
		case "mysql":
			easyjson5a98ae00Decode(in, &out.Mysql)
		case "client_port":
			out.ClientPort = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "beat":
			easyjson5a98ae00Decode1(in, &out.Beat)
		case "@metadata":
			easyjson5a98ae00Decode2(in, &out.Metadata)
		case "response_time":
			out.ResponseTime = float64(in.Float64())
		case "status":
			out.Status = string(in.String())
		case "ip":
			out.IP = string(in.String())
		case "proc":
			out.Proc = string(in.String())
		case "direction":
			out.Direction = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "Server":
			out.Server = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a98ae00EncodeGithubComAthouneLepsiusLumberSql1(out *jwriter.Writer, in Mysql) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"client_ip\":")
	out.String(string(in.ClientIP))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"client_server\":")
	out.String(string(in.ClientServer))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"client_proc\":")
	out.String(string(in.ClientProc))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"@timestamp\":")
	out.String(string(in.TimeStamp))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"query\":")
	out.String(string(in.Query))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"method\":")
	out.String(string(in.Method))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bytes_out\":")
	out.Int(int(in.BytesOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bytes_in\":")
	out.Int(int(in.BytesIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mysql\":")
	easyjson5a98ae00Encode(out, in.Mysql)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"client_port\":")
	out.Int(int(in.ClientPort))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"port\":")
	out.Int(int(in.Port))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"beat\":")
	easyjson5a98ae00Encode1(out, in.Beat)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"@metadata\":")
	easyjson5a98ae00Encode2(out, in.Metadata)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"response_time\":")
	out.Float64(float64(in.ResponseTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"status\":")
	out.String(string(in.Status))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ip\":")
	out.String(string(in.IP))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"proc\":")
	out.String(string(in.Proc))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"direction\":")
	out.String(string(in.Direction))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Server\":")
	out.String(string(in.Server))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mysql) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a98ae00EncodeGithubComAthouneLepsiusLumberSql1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mysql) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a98ae00EncodeGithubComAthouneLepsiusLumberSql1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mysql) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a98ae00DecodeGithubComAthouneLepsiusLumberSql1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mysql) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a98ae00DecodeGithubComAthouneLepsiusLumberSql1(l, v)
}
func easyjson5a98ae00Decode2(in *jlexer.Lexer, out *struct {
	Type string `json:"type"`
	Beat string `json:"beat"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "beat":
			out.Beat = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a98ae00Encode2(out *jwriter.Writer, in struct {
	Type string `json:"type"`
	Beat string `json:"beat"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"beat\":")
	out.String(string(in.Beat))
	out.RawByte('}')
}
func easyjson5a98ae00Decode1(in *jlexer.Lexer, out *struct {
	Hostname string `json:"hostname"`
	Version  string `json:"version"`
	Name     string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hostname":
			out.Hostname = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a98ae00Encode1(out *jwriter.Writer, in struct {
	Hostname string `json:"hostname"`
	Version  string `json:"version"`
	Name     string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hostname\":")
	out.String(string(in.Hostname))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"version\":")
	out.String(string(in.Version))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	out.RawByte('}')
}
func easyjson5a98ae00Decode(in *jlexer.Lexer, out *struct {
	InsertId     int  `json:"insert_id"`
	NumRows      int  `json:"num_rows"`
	NumFields    int  `json:"num_fields"`
	IsError      bool `json:"is_error"`
	ErrorCode    int  `json:error_code`
	AffectedRows int  `json:affected_rows`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "insert_id":
			out.InsertId = int(in.Int())
		case "num_rows":
			out.NumRows = int(in.Int())
		case "num_fields":
			out.NumFields = int(in.Int())
		case "is_error":
			out.IsError = bool(in.Bool())
		case "ErrorCode":
			out.ErrorCode = int(in.Int())
		case "AffectedRows":
			out.AffectedRows = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a98ae00Encode(out *jwriter.Writer, in struct {
	InsertId     int  `json:"insert_id"`
	NumRows      int  `json:"num_rows"`
	NumFields    int  `json:"num_fields"`
	IsError      bool `json:"is_error"`
	ErrorCode    int  `json:error_code`
	AffectedRows int  `json:affected_rows`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"insert_id\":")
	out.Int(int(in.InsertId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_rows\":")
	out.Int(int(in.NumRows))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_fields\":")
	out.Int(int(in.NumFields))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"is_error\":")
	out.Bool(bool(in.IsError))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ErrorCode\":")
	out.Int(int(in.ErrorCode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"AffectedRows\":")
	out.Int(int(in.AffectedRows))
	out.RawByte('}')
}
